{"ast":null,"code":"var _jsxFileName = \"/Users/apoorva/Desktop/apoorva/solar/src/solar/index.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport '../App.css';\nimport { data as initialData } from \"./data\";\nimport { calculateTotalEnergy, calculateSummary, random } from './utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Solar() {\n  _s();\n  const [panelData, setPanelData] = useState([]);\n  const [totalEnergy, setTotalEnergy] = useState('');\n  const [summary, setSummary] = useState({});\n  useEffect(() => {\n    const fetchData = () => {\n      const moment = require('moment');\n      const freshData = [];\n      initialData.forEach(panel => {\n        freshData.push({\n          ...panel,\n          time: moment().toISOString(),\n          wattage: random(0, 400),\n          voltage: random(0, 20)\n        });\n      });\n      setPanelData(freshData);\n      setTotalEnergy(calculateTotalEnergy(freshData));\n      setSummary(calculateSummary(freshData));\n    };\n    fetchData();\n    const interval = setInterval(fetchData, 5000);\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"solar\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"solar-text\",\n      children: [\"Total energy produced by the farm : \", totalEnergy, \"kWh\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"solar-text\",\n      children: [\"Summary : (Healthy/ Weak) \", summary.healthy, \"/\", summary.weak]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"solar-container\",\n      children: panelData.map(dt => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"solar-grid\",\n          style: dt.voltage < 10 && dt.wattage < 200 ? {\n            background: 'red'\n          } : {\n            background: 'green'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"solar-text\",\n            children: [\"Voltage : \", dt.voltage]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"solar-text\",\n            children: [\"Wattage : \", dt.wattage]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 21\n          }, this)]\n        }, dt.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 24\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n_s(Solar, \"1LKghSCrSbN5eH2yjy1hs5E3kwg=\");\n_c = Solar;\nexport default Solar;\nvar _c;\n$RefreshReg$(_c, \"Solar\");","map":{"version":3,"names":["useEffect","useState","data","initialData","calculateTotalEnergy","calculateSummary","random","jsxDEV","_jsxDEV","Solar","_s","panelData","setPanelData","totalEnergy","setTotalEnergy","summary","setSummary","fetchData","moment","require","freshData","forEach","panel","push","time","toISOString","wattage","voltage","interval","setInterval","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","healthy","weak","map","dt","style","background","id","_c","$RefreshReg$"],"sources":["/Users/apoorva/Desktop/apoorva/solar/src/solar/index.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport '../App.css';\nimport {data as initialData} from \"./data\";\nimport {calculateTotalEnergy,calculateSummary,random} from './utils';\n\nfunction Solar() {\n    const [panelData,setPanelData]=useState([]);\n    const [totalEnergy,setTotalEnergy] = useState('');\n    const [summary,setSummary]=useState({});\n\n    useEffect(()=>{\n        const fetchData = () => {\n                const moment = require('moment')\n                const freshData = []\n                initialData.forEach(panel => {\n                    freshData.push({\n                    ...panel,\n                    time: moment().toISOString(),\n                    wattage: random(0, 400),\n                    voltage: random(0,20)\n                    })\n                    })\n                setPanelData(freshData)\n                setTotalEnergy(calculateTotalEnergy(freshData))\n                setSummary(calculateSummary(freshData))\n            \n          };\n      \n          fetchData();\n          const interval = setInterval(fetchData, 5000);\n          return () => clearInterval(interval);\n    },[])\n\n  return (\n    <div className=\"solar\">\n        <p className='solar-text'>Total energy produced by the farm : {totalEnergy}kWh</p>\n        <p className='solar-text'>\n            Summary : (Healthy/ Weak) {summary.healthy}/{summary.weak}\n        </p>\n        <div className='solar-container'>\n            {panelData.map((dt)=>{\n                return <div className='solar-grid' style={dt.voltage < 10 && dt.wattage <200 ? {background:'red'}:{background:'green'}} key={dt.id}>\n                    <p className='solar-text'>Voltage : {dt.voltage}</p>\n                    <p className='solar-text'>Wattage : {dt.wattage}</p>\n                </div>\n            })}\n        </div>\n    </div>\n  );\n}\n\nexport default Solar;\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAO,YAAY;AACnB,SAAQC,IAAI,IAAIC,WAAW,QAAO,QAAQ;AAC1C,SAAQC,oBAAoB,EAACC,gBAAgB,EAACC,MAAM,QAAO,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErE,SAASC,KAAKA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,SAAS,EAACC,YAAY,CAAC,GAACX,QAAQ,CAAC,EAAE,CAAC;EAC3C,MAAM,CAACY,WAAW,EAACC,cAAc,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACjD,MAAM,CAACc,OAAO,EAACC,UAAU,CAAC,GAACf,QAAQ,CAAC,CAAC,CAAC,CAAC;EAEvCD,SAAS,CAAC,MAAI;IACV,MAAMiB,SAAS,GAAGA,CAAA,KAAM;MAChB,MAAMC,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;MAChC,MAAMC,SAAS,GAAG,EAAE;MACpBjB,WAAW,CAACkB,OAAO,CAACC,KAAK,IAAI;QACzBF,SAAS,CAACG,IAAI,CAAC;UACf,GAAGD,KAAK;UACRE,IAAI,EAAEN,MAAM,CAAC,CAAC,CAACO,WAAW,CAAC,CAAC;UAC5BC,OAAO,EAAEpB,MAAM,CAAC,CAAC,EAAE,GAAG,CAAC;UACvBqB,OAAO,EAAErB,MAAM,CAAC,CAAC,EAAC,EAAE;QACpB,CAAC,CAAC;MACF,CAAC,CAAC;MACNM,YAAY,CAACQ,SAAS,CAAC;MACvBN,cAAc,CAACV,oBAAoB,CAACgB,SAAS,CAAC,CAAC;MAC/CJ,UAAU,CAACX,gBAAgB,CAACe,SAAS,CAAC,CAAC;IAE7C,CAAC;IAEDH,SAAS,CAAC,CAAC;IACX,MAAMW,QAAQ,GAAGC,WAAW,CAACZ,SAAS,EAAE,IAAI,CAAC;IAC7C,OAAO,MAAMa,aAAa,CAACF,QAAQ,CAAC;EAC1C,CAAC,EAAC,EAAE,CAAC;EAEP,oBACEpB,OAAA;IAAKuB,SAAS,EAAC,OAAO;IAAAC,QAAA,gBAClBxB,OAAA;MAAGuB,SAAS,EAAC,YAAY;MAAAC,QAAA,GAAC,sCAAoC,EAACnB,WAAW,EAAC,KAAG;IAAA;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eAClF5B,OAAA;MAAGuB,SAAS,EAAC,YAAY;MAAAC,QAAA,GAAC,4BACI,EAACjB,OAAO,CAACsB,OAAO,EAAC,GAAC,EAACtB,OAAO,CAACuB,IAAI;IAAA;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1D,CAAC,eACJ5B,OAAA;MAAKuB,SAAS,EAAC,iBAAiB;MAAAC,QAAA,EAC3BrB,SAAS,CAAC4B,GAAG,CAAEC,EAAE,IAAG;QACjB,oBAAOhC,OAAA;UAAKuB,SAAS,EAAC,YAAY;UAACU,KAAK,EAAED,EAAE,CAACb,OAAO,GAAG,EAAE,IAAIa,EAAE,CAACd,OAAO,GAAE,GAAG,GAAG;YAACgB,UAAU,EAAC;UAAK,CAAC,GAAC;YAACA,UAAU,EAAC;UAAO,CAAE;UAAAV,QAAA,gBACnHxB,OAAA;YAAGuB,SAAS,EAAC,YAAY;YAAAC,QAAA,GAAC,YAAU,EAACQ,EAAE,CAACb,OAAO;UAAA;YAAAM,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACpD5B,OAAA;YAAGuB,SAAS,EAAC,YAAY;YAAAC,QAAA,GAAC,YAAU,EAACQ,EAAE,CAACd,OAAO;UAAA;YAAAO,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC;QAAA,GAFqEI,EAAE,CAACG,EAAE;UAAAV,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAG7H,CAAC;MACV,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEV;AAAC1B,EAAA,CA5CQD,KAAK;AAAAmC,EAAA,GAALnC,KAAK;AA8Cd,eAAeA,KAAK;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}