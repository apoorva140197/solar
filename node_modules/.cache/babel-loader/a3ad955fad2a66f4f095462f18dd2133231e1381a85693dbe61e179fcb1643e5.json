{"ast":null,"code":"var _s = $RefreshSig$();\nimport { data as initialData } from \"./data\";\nimport { calculateTotalEnergy, calculateSummary, random } from './utils';\nimport { useEffect, useState } from 'react';\nconst useLogic = () => {\n  _s();\n  const [panelData, setPanelData] = useState([]);\n  const [totalEnergy, setTotalEnergy] = useState('');\n  const [summary, setSummary] = useState({});\n  useEffect(() => {\n    const fetchData = () => {\n      const moment = require('moment');\n      const freshData = [];\n      initialData.forEach(panel => {\n        freshData.push({\n          ...panel,\n          time: moment().toISOString(),\n          wattage: random(0, 400),\n          voltage: random(0, 20)\n        });\n      });\n      setPanelData(freshData);\n      setTotalEnergy(calculateTotalEnergy(freshData));\n      setSummary(calculateSummary(freshData));\n    };\n    fetchData();\n    const interval = setInterval(fetchData, 5000);\n    return () => clearInterval(interval);\n  }, []);\n  return {\n    panelData,\n    totalEnergy,\n    summary\n  };\n};\n_s(useLogic, \"1LKghSCrSbN5eH2yjy1hs5E3kwg=\");\nexport { useLogic };","map":{"version":3,"names":["data","initialData","calculateTotalEnergy","calculateSummary","random","useEffect","useState","useLogic","_s","panelData","setPanelData","totalEnergy","setTotalEnergy","summary","setSummary","fetchData","moment","require","freshData","forEach","panel","push","time","toISOString","wattage","voltage","interval","setInterval","clearInterval"],"sources":["/Users/apoorva/Desktop/apoorva/solar/src/solar/useLogic.js"],"sourcesContent":["import {data as initialData} from \"./data\";\nimport {calculateTotalEnergy,calculateSummary,random} from './utils';\nimport { useEffect, useState } from 'react';\n\nconst useLogic = ()=>{\n    const [panelData,setPanelData]=useState([]);\n    const [totalEnergy,setTotalEnergy] = useState('');\n    const [summary,setSummary]=useState({});\n\n    useEffect(()=>{\n        const fetchData = () => {\n                const moment = require('moment')\n                const freshData = []\n                initialData.forEach(panel => {\n                    freshData.push({\n                    ...panel,\n                    time: moment().toISOString(),\n                    wattage: random(0, 400),\n                    voltage: random(0,20)\n                    })\n                    })\n                setPanelData(freshData)\n                setTotalEnergy(calculateTotalEnergy(freshData))\n                setSummary(calculateSummary(freshData))\n            \n          };\n      \n          fetchData();\n          const interval = setInterval(fetchData, 5000);\n          return () => clearInterval(interval);\n    },[])\n\n    return {\n        panelData,\n        totalEnergy,\n        summary\n    }\n};\n\nexport {useLogic}"],"mappings":";AAAA,SAAQA,IAAI,IAAIC,WAAW,QAAO,QAAQ;AAC1C,SAAQC,oBAAoB,EAACC,gBAAgB,EAACC,MAAM,QAAO,SAAS;AACpE,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,MAAMC,QAAQ,GAAGA,CAAA,KAAI;EAAAC,EAAA;EACjB,MAAM,CAACC,SAAS,EAACC,YAAY,CAAC,GAACJ,QAAQ,CAAC,EAAE,CAAC;EAC3C,MAAM,CAACK,WAAW,EAACC,cAAc,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACjD,MAAM,CAACO,OAAO,EAACC,UAAU,CAAC,GAACR,QAAQ,CAAC,CAAC,CAAC,CAAC;EAEvCD,SAAS,CAAC,MAAI;IACV,MAAMU,SAAS,GAAGA,CAAA,KAAM;MAChB,MAAMC,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;MAChC,MAAMC,SAAS,GAAG,EAAE;MACpBjB,WAAW,CAACkB,OAAO,CAACC,KAAK,IAAI;QACzBF,SAAS,CAACG,IAAI,CAAC;UACf,GAAGD,KAAK;UACRE,IAAI,EAAEN,MAAM,CAAC,CAAC,CAACO,WAAW,CAAC,CAAC;UAC5BC,OAAO,EAAEpB,MAAM,CAAC,CAAC,EAAE,GAAG,CAAC;UACvBqB,OAAO,EAAErB,MAAM,CAAC,CAAC,EAAC,EAAE;QACpB,CAAC,CAAC;MACF,CAAC,CAAC;MACNM,YAAY,CAACQ,SAAS,CAAC;MACvBN,cAAc,CAACV,oBAAoB,CAACgB,SAAS,CAAC,CAAC;MAC/CJ,UAAU,CAACX,gBAAgB,CAACe,SAAS,CAAC,CAAC;IAE7C,CAAC;IAEDH,SAAS,CAAC,CAAC;IACX,MAAMW,QAAQ,GAAGC,WAAW,CAACZ,SAAS,EAAE,IAAI,CAAC;IAC7C,OAAO,MAAMa,aAAa,CAACF,QAAQ,CAAC;EAC1C,CAAC,EAAC,EAAE,CAAC;EAEL,OAAO;IACHjB,SAAS;IACTE,WAAW;IACXE;EACJ,CAAC;AACL,CAAC;AAACL,EAAA,CAjCID,QAAQ;AAmCd,SAAQA,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}